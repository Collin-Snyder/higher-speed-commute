export function capitalize(word: string) {
  return word[0].toUpperCase() + word.slice(1);
}

export function generateModalTitles(modalName: string, currentLevel: {name: string, description: string, [key: string]: any}, playMode: string): {title: string, subtitle: string} {
  let output = {title: "", subtitle: ""};
  if (modalName === "levelStart") {
    let {name, description} = currentLevel;
    output.title = name;
    output.subtitle = description;
  }
  else if (modalName === "loadMap") {
    if (playMode === "completed") output.title = "Completed Levels"; 
    else output.title = "Your Maps";
  }
  else if (modalName === "save") output.title = "Save Your Map";
  else if (modalName === "reset") {
    output.title = "Reset Map";
    output.subtitle = "This action cannot be undone";
  } else if (modalName === "settings") {
    output.title = "Settings"
  } else if (modalName === "rulesHelp") {
    output.title = "Gameplay Rules"
  } else if (modalName === "controlsHelp") {
    output.title = "Gameplay Controls"
  } else if (modalName === "saveHelp") {
    output.title = "Designing and Saving"
  }
  return output;
}

export function validateBaseEventTransition(from: TMode | TMode[], current: TMode, event: string) {
  let valid = true;
  if (Array.isArray(from)) {
    if (!from.includes(current)) valid = false;
  } else if (current !== from) valid = false;

  if (!valid) {
    console.error(
      new Error(
        `Attempted invalid state transition - ${event} event must transition from mode "${from}", but mode is currently "${current}"`
      )
    );
  }

  return valid;
}

export const drawTileMap = (
  tiles: ITile[],
  widthInSquares: number,
  drawFunc: (
    type: TTile,
    x: number,
    y: number,
    w: number,
    h: number,
    a: number,
    deg: number
  ) => void
) => {
  let x = 0,
    y = 0;
  for (let tile of tiles) {
    let { type, w, h, a, deg, display } = tile;
    if (display && type) {
      if (typeof type === "string") {
        drawFunc(type as TTile, x, y, w, h, a, deg);
      } else if (Array.isArray(type)) {
        type.forEach((t: TTile) => {
          drawFunc(t, x, y, w, h, a, deg);
        });
      }
    }
    if (++x >= widthInSquares) {
      x = 0;
      y++;
    }
  }
};

export const forEachMapTile = (
  cb: (tileIndex: number, x: number, y: number, w: number, h: number) => void
) => {
  let x = 0,
    y = 0, idx = 0, tileSize = 25;

  while (idx < 1000) {
    cb(idx, x, y, tileSize, tileSize);
    x += tileSize;
    if (x >= 1000 ) {
      x = 0;
      y += tileSize;
    }
    idx++;
  }

};


export function openModal(modalName: TModalName) {
  window.toggleModal(true, modalName);
}

export function noOp () {};