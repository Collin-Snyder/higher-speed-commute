export class LocalDatabaseError extends Error {
    constructor(message: string) {
        super(message);
        this.name = "LocalDatabaseError";
    }
}

export class MapError extends Error {
    constructor (message: string) {
        super(message);
        this.name = "MapError";
    }
}

export class SquareIdError extends MapError {
    constructor(id: number) {
        super(`${id} is not a valid square id`);
        this.name = "SquareIdError";
    }
}

export class CoordinatesError extends MapError {
    constructor(x: number, y: number) {
        super(`${x}x${y} are invalid coordinates - no square here`);
        this.name = "CoordinatesError";
    }
}

let squareAttributes = ["id", "row", "column", "drivable", "borders", "schoolZone", "coordinates", "tileIndex"];

export class MapSquareAttributeError extends MapError {
    constructor(attribute: string) {
        super(`"${attribute}" is not a valid square attribute. Valid attributes are ${squareAttributes.join(", ")}`);
        this.name = "MapSquareAttributesError";
    }
}

export class PathError extends MapError {
    constructor(startSquareId: number, endSquareId: number) {
        super(`No valid path from square ${startSquareId} to square ${endSquareId}`)
        this.name = "PathError";
    }
}

export class UndefinedBorderError extends MapError {
    constructor(squareId: number) {
        super(`Found undefined border data for square ${squareId}`);
        this.name = "UndefinedBorderError";
    }
}

export class ButtonError extends Error {
    constructor() {
        super("Button entities are not populated");
        this.name = "ButtonError";
    }
}

export class SaveError extends Error {
    constructor(message: string) {
        super(message);
        this.name = "SaveError";
    }
}

export class NoMapIdError extends SaveError {
    constructor() {
        super("You are trying to save a map that does not already have an associated id. Please use saveAsAsync instead");
        this.name = "NoMapIdError";
    }
}

export class ExistingNameError extends SaveError {
    constructor(name: string) {
        super(`There is already a saved level named "${name}"`);
        this.name = "ExistingNameError";
    }
}

export class LoadSavedError extends Error {
    constructor(id: number) {
        super (`No custom map exists with id ${id}`);
        this.name = "LoadSavedError";
    }
}
